#Task 1
#Method overloading.
#Create a base class named Animal with a method called talk and then create two subclasses: Dog and Cat, 
#and make their own implementation of the method talk be different.
#For instance, Dog’s can be to print ‘woof woof’, 
#while Cat’s can be to print ‘meow’.
#Also, create a simple generic function, 
#which takes as input instance of a Cat or Dog classes and performs talk method on input parameter. 

class Animal:
    def talk(self):
        #raise NotImplementedError("Must be implemented by a sub class")
        pass #overriden by a subclasses as animals speak in their own way
class Dog(Animal):
    def talk(self):
        print('woof woof')

class Cat(Animal):
    def talk(self):
        print('meow')

def make_animal_talk(animal):
    animal.talk()

my_dog = Dog()
my_cat = Cat()
make_animal_talk(my_dog) #woof woof
make_animal_talk(my_cat) #meow


#Task2
#Library, Book, and Author classes with specified methods and attributes:

class Library:
    def __init__(self, name):
        self.name = name
        self.books = []
        self.authors = []

    def new_book(self, name, year, author):
        book = Book(name, year, author)
        self.books.append(book)
        return book

    def group_by_author(self, author):
        return [book for book in self.books if book.author == author]

    def group_by_year(self, year):
        return [book for book in self.books if book.year == year]

    def __repr__(self):
        return f"Library({self.name})"

    def __str__(self):
        return f"{self.name} library with {len(self.books)} books"


class Book:
    total_books = 0

    def __init__(self, name, year, author):
        self.name = name
        self.year = year
        self.author = author
        author.books.append(self)
        Book.total_books += 1

    def __repr__(self):
        return f"Book({self.name}, {self.year}, {self.author})"

    def __str__(self):
        return f"{self.name} ({self.year}) written by {self.author.name}"


class Author:
    def __init__(self, name, country, birthday):
        self.name = name
        self.country = country
        self.birthday = birthday
        self.books = []

    def __repr__(self):
        return f"Author({self.name}, {self.country}, {self.birthday})"

    def __str__(self):
        return f"{self.name} from {self.country}, born on {self.birthday}"

#створимо бiблiотеку
my_library = Library ("My Library")
#створюемо instance авторiв 
shevchenko = Author("T.G.Shevchenko", "Ukraine", "March 9, 1814 ")
gogol = Author("N.V.Gogol", "Ukraine", "April 1, 1809")

#додамо книги

kobzar = my_library.new_book("Kobzar", 1840, shevchenko)
gaydamaky = my_library.new_book("Gaydamaky", 1841, shevchenko)
zapovit = my_library.new_book("Zapovit", 1845, shevchenko)
viy = my_library.new_book("Viy", 1835, gogol)
dead_souls = my_library.new_book("Dead Souls",1835, gogol)

#группування за автором

shevchenko_books = my_library.group_by_author(shevchenko)
gogol_books = my_library.group_by_author(gogol)

#группування за роком видання

gogol_books_1835 = my_library.group_by_year(1835)

#вивести в принт бiблiотеку i iнформацiю про книжки
print(my_library)
print(kobzar)
print(dead_souls)
print(shevchenko_books)
print(gogol_books)
print (gogol_books_1835)

#Task3

#Створіть клас Fraction, який буде представляти всю базову арифметичну логіку для дробів (+, -, /, *) 
#з належною перевіркою й обробкою помилок.
# Потрібно додати магічні методи для математичних операцій та операції порівняння між об'єктами класу Fraction

class Fraction:
    def __init__(self, numerator, denominator):
        if denominator == 0:
          #raise ValueError
           raise ZeroDivisionError("Denominator zero is not allowed.")
        self.numerator = numerator
        self.denominator = denominator
#конструктор класу, що приймає чисельник та знаменник дробу, виводить ZeroDivisionError,
якщо знаменник дорівнює нулю

    def __str__(self):
        if self.denominator == 1:
            return str(self.numerator)
        else:
            return f"{self.numerator}/{self.denominator}"

    def __repr__(self):
        return f"Fraction({self.numerator}, {self.denominator})" #представлення об'єкту дробу у вигляді рядка

    def __eq__(self, other):
        return self.numerator * other.denominator == self.denominator * other.numerator #порівняння

    def ___ne__(self, other):
        return self.numerator * other.denominator != self.denominator * other.numerator

    def __add__(self, other):
        numerator = self.numerator * other.denominator + self.denominator * other.numerator
        denominator = self.denominator * other.denominator
        #return Fraction.reduce(Fraction(numerator, denominator))
        return Fraction(numerator, denominator).simplify()

    def __sub__(self, other):
        numerator = self.numerator * other.denominator - self.denominator * other.numerator
        denominator = self.denominator * other.denominator
        #return Fraction.reduce(Fraction(numerator, denominator))
        return Fraction(numerator, denominator).simplify()

    def __mul__(self, other):
        numerator = self.numerator * other.numerator
        denominator = self.denominator * other.denominator
        #return Fraction.reduce(Fraction(numerator, denominator))
        return Fraction(numerator, denominator).simplify()

    def __truediv__(self, other):
        if other.numerator == 0:
            raise ZeroDivisionError("zero division is not allowed.")
        numerator = self.numerator * other.denominator
        denominator = self.denominator * other.numerator
        #return Fraction.reduce(Fraction(numerator, denominator)) #ділення
        return Fraction(numerator, denominator).simplify()

    def __lt__(self, other):
        return self.numerator * other.denominator < self.denominator * other.numerator #порівняння

    def __le__(self, other):
        return self.numerator * other.denominator <= self.denominator * other.numerator

    def __gt__(self, other):
        return self.numerator * other.denominator > self.denominator * other.numerator

    def __ge__(self, other):
        return self.numerator * other.denominator >= self.denominator * other.numerator

#@staticmethod
#def greatest_common_d(a, b): #найбільше спільне ділення двох чисел декоратором класу 
#    while b:
#       a, b = b, a % b
#    return a

#@classmethod
#def reduce(cls, fraction): #скорочення дробу
#    greatest_common_d = cls.greatest_common_d(fraction.numerator, fraction.denominator)
#    numerator = fraction.numerator // greatest_common_d
#    denominator = fraction.denominator // greatest_common_d
#    if denominator < 0:
#        numerator, denominator = -numerator, -denominator
#    return cls(numerator, denominator)

    def _gcd(self, a, b):
        if b == 0:
            return a
        else:
            return self._gcd(b, a % b)
    def simplify(self):
        gcd = self._gcd(self.numerator, self.denominator)
        return Fraction(self.numerator // gcd, self.denominator // gcd)

    def value(self):#повертає значення дробу як десяткове число
        return self.numerator / self.denominator

    x = Fraction(1, 2)
    y = Fraction(1, 4)
    x + y == Fraction(3, 4)
    q = x + y

print(q)  # виводить 3/4
print(q == Fraction(3, 4))  # виводить True

