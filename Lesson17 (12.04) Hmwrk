#Task 1
#Method overloading.
#Create a base class named Animal with a method called talk and then create two subclasses: Dog and Cat, 
and make their own implementation of the method talk be different.
 For instance, Dog’s can be to print ‘woof woof’, 
while Cat’s can be to print ‘meow’.

Also, create a simple generic function, 
which takes as input instance of a Cat or Dog classes and performs talk method on input parameter. 

class Animal:
    def talk(self):
        raise NotImplementedError("Must be implemented by a sub class")
    
class Dog(Animal):
    def talk(self):
        print('woof woof')

class Cat(Animal):
    def talk(self):
        print('meow')

def make_animal_talk(animal):
    animal.talk()

#animal base class has a method called talk which is not implemented
#because we need cat and dog to speak in their own way
#dog subclass prints woof woof and cat prints meow

my_dog = Dog()
my_cat = Cat()
make_animal_talk(my_dog) #woof woof
make_animal_talk(my_cat) #meow
#when make_animal_talk is called with my_dog tha talk method of the
#Dog subclass is called and woof woof is preinted.
#when called with my cat, the talk method of the Cat subclass is called
#and the meow is printed. 
